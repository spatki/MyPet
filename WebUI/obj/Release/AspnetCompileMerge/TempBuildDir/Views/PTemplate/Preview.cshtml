@using ProcessAccelerator.WebUI
@using Omu.AwesomeMvc
@using System.Linq;
@model tbl_process_templateInput
@{
    Layout = null;
}

<div class="modal-dialog" style="width:80%;height:80%;">
	<div class="modal-content">
        <div class="modal-body"> 
            <div class="container-fluid">
                <div class="panel colored">
                    <div class="panel-body">
                        <div class="panel-header">
                            <h1>@Model.Name</h1>
                        </div>
                        <div class="row">
                            <div class="panel">
                                <div class="panel-body">
                                    <table class="table ">
                                        <thead>
                                            <th class="docTableHeader-bg" colspan="4">Document Release Note</th>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <th class="docTableLabel-bg">Project Name</th>
                                                <td colspan="3">Not Applicable</td>
                                            </tr>
                                            <tr>
                                                <th class="docTableLabel-bg">Document Name</th>
                                                <td colspan="3">@Model.Name</td>
                                            </tr>                                                
                                            <tr>
                                                <th class="docTableLabel-bg">Version</th>
                                                <td colspan="3">@((Model.tbl_process_tmpl_revision.LastOrDefault().version == "") ? "" : Model.tbl_process_tmpl_revision.LastOrDefault().version + "." )@(Model.tbl_process_tmpl_revision.Count() - 1)</td>
                                            </tr>                                                
                                            <tr>
                                                <th class="docTableLabel-bg">Release Date</th>
                                                <td colspan="3">@(Model.PublishDate == null ? "" : Model.PublishDate.GetValueOrDefault().ToString(Globals.DateFormatString))</td>
                                            </tr>
                                            <tr>
                                                <th class="docTableLabel-bg">Prepared By</th>
                                                <td >@((Model.CreatedByName == "") ? Model.UpdatedByName : Model.CreatedByName)</td>
                                                <th class="docTableLabel-bg">Date</th>
                                                <td>@Model.CreateDate.ToString(Globals.DateFormatString)</td>
                                            </tr>             
                                            <tr>
                                                <th class="docTableLabel-bg">Reviewed By</th>
                                                <td ></td>
                                                <th class="docTableLabel-bg">Date</th>
                                                <td></td>
                                            </tr>             
                                            <tr>
                                                <th class="docTableLabel-bg">Approved By</th>
                                                <td ></td>
                                                <th class="docTableLabel-bg">Date</th>
                                                <td></td>
                                            </tr>             
                                            <tr>
                                                <th class="docTableHeader-bg" colspan="4">Revision History</th>
                                            </tr>
                                            <tr>
                                                <th class="docTableLabel-bg">SNo</th>
                                                <th class="docTableLabel-bg">Revision Date</th>
                                                <th class="docTableLabel-bg">Revision Description</th>
                                                <th class="docTableLabel-bg">Release Date</th>
                                            </tr>    
                                            @{var revCounter = 0;
                                            foreach (var revision in Model.tbl_process_tmpl_revision)
                                            {
                                                revCounter = revCounter + 1;
                                                <tr>
                                                    <th>@revCounter</th>
                                                    <th>@revision.RevisionDate</th>
                                                    <th>@revision.Comments</th>
                                                    <th>@revision.PublishDate</th>
                                                </tr>                                                         
                                            }         
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="panel">
                                <div class="panel-body">
                                    <table class="table table-bordered">
                                        <thead>
                                            <th class="docTableHeader-bg" colspan="4">Table Of Contents</th>
                                        </thead>
                                        <tbody>
                                        @{seededTemplateSections sections = new seededTemplateSections { seed = null, isParent = true, tbl_process_tmpl_section = Model.tbl_process_tmpl_section, tbl_process_tmpl_group = Model.tbl_process_tmpl_group };
                                            var sectionsInDoc = Model.tbl_process_tmpl_section.Where(o => o.tbl_Process_Tmpl_GroupID == null).OrderBy(o => o.SequenceNo).GetEnumerator(); ; // Begin with root
                                            var groupsInDoc = Model.tbl_process_tmpl_group.Where(o => o.Level == 1).OrderBy(o => o.SequenceNo).GetEnumerator(); ;
                                            var sequence = 0;   // ****** Check whether needed and then discard
                                            short sectionSequence = 0; // First sequence in the section
                                            short groupSequence = 0;   // First sequence in the group
                                            var keepProcessing = true;
                                            var sectionsFound = true;
                                            var groupsFound = true;

                                            if (sectionsInDoc.MoveNext()) { sectionSequence = sectionsInDoc.Current.SequenceNo; } else { sectionsFound = false; }
                                            if (groupsInDoc.MoveNext()) { groupSequence = groupsInDoc.Current.SequenceNo; } else { groupsFound = false; }
                                            if (!sectionsFound && !groupsFound) { keepProcessing = false; }   // No need to continue processing

                                            if (keepProcessing) { 
                                                while (keepProcessing)    // Handling sequence of groups and sections under this group. As the sequence can be intermixed
                                                {
                                                    // If the section comes first in sequence, print the section first
                                                    if (sectionsFound && (!groupsFound || sectionSequence < groupSequence))
                                                    {
                                                        sequence = sequence + 1;
                                                        <tr>
                                                            <th class="docTableSequence-bg">@(sequence)</th>
                                                            <td><a href="#PSection@(sectionsInDoc.Current.ID)">@sectionsInDoc.Current.Title</a></td>
                                                        </tr>
                                                        if (sectionsInDoc.MoveNext()) { sectionSequence = sectionsInDoc.Current.SequenceNo; } else { sectionsFound = false; }  // Get the next section
                                                    }

                                                    if (groupsFound && (!sectionsFound || groupSequence < sectionSequence))
                                                    {
                                                        sequence = sequence + 1;
                                                        sections.seed = groupsInDoc.Current.ID;
                                                        sections.sequence = sequence;
                                                        sections.isParent = false;
                                                        sections.sequencePrefix = "";
                                                        @Html.Partial("_showTOCPreview", sections)
                                                        if (groupsInDoc.MoveNext()) { groupSequence = groupsInDoc.Current.SequenceNo; } else { groupsFound = false; }  
                                                    }
                                                    if (!sectionsFound && !groupsFound) { keepProcessing = false; }   // No need to continue processing                  
                                                }
                                            }                                                        
                                        }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            @{      sectionsInDoc = Model.tbl_process_tmpl_section.Where(o => o.tbl_Process_Tmpl_GroupID == null).OrderBy(o => o.SequenceNo).GetEnumerator(); ; // Begin with root
                                    groupsInDoc = Model.tbl_process_tmpl_group.Where(o => o.Level == 1).OrderBy(o => o.SequenceNo).GetEnumerator(); ;
                                    sequence = 0;   // ****** Check whether needed and then discard
                                    sectionSequence = 0; // First sequence in the section
                                    groupSequence = 0;   // First sequence in the group
                                    keepProcessing = true;
                                    sectionsFound = true;
                                    groupsFound = true;

                                    if (sectionsInDoc.MoveNext()) { sectionSequence = sectionsInDoc.Current.SequenceNo; } else { sectionsFound = false; }
                                    if (groupsInDoc.MoveNext()) { groupSequence = groupsInDoc.Current.SequenceNo; } else { groupsFound = false; }
                                    if (!sectionsFound && !groupsFound) { keepProcessing = false; }   // No need to continue processing

                                    if (keepProcessing) { 
                                        while (keepProcessing)    // Handling sequence of groups and sections under this group. As the sequence can be intermixed
                                        {
                                            // If the section comes first in sequence, print the section first
                                            if (sectionsFound && (!groupsFound || sectionSequence < groupSequence))
                                            {
                                                sequence = sequence + 1;
                                                <div class="panel">
                                                    <div class="panel-body">
                                                        <div class="docTableSectionHeader col-md-12">@(sequence). <a id="PSection@(sectionsInDoc.Current.ID)">@sectionsInDoc.Current.Title</a></div>
                                                        <br />
                                                        <div class="panel">
                                                            <div class="panel-body">
                                                                <div class="col-md-12"><br />@Html.Raw(sectionsInDoc.Current.Detail)</div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                if (sectionsInDoc.MoveNext()) { sectionSequence = sectionsInDoc.Current.SequenceNo; } else { sectionsFound = false; }  // Get the next section
                                            }

                                            if (groupsFound && (!sectionsFound || groupSequence < sectionSequence))
                                            {
                                                sequence = sequence + 1;
                                                sections.seed = groupsInDoc.Current.ID;
                                                sections.sequence = sequence;
                                                sections.isParent = false;
                                                sections.sequencePrefix = "";
                                                @Html.Partial("_showSectionsPreview", sections)
                                                if (groupsInDoc.MoveNext()) { groupSequence = groupsInDoc.Current.SequenceNo; } else { groupsFound = false; }  
                                            }
                                            if (!sectionsFound && !groupsFound) { keepProcessing = false; }   // No need to continue processing                  
                                        }
                                    }                                                        

                                }
                        </div>
                    </div>
                </div>        
            </div>
	    <div class="modal-footer">
			<div class="form-group">
		        <button type="button" class="btn gray-bg" data-dismiss="modal">Close</button>
			</div>
	    </div>
      </div>
	</div><!-- /.modal-content -->
</div><!-- /.modal-dialog -->
